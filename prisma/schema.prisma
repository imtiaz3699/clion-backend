generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  id         String    @id @default(uuid())
  post_id    Int
  user_Id    Int
  comment    String
  created_at DateTime  @default(now())
  post       post      @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "Comment_post_id_fkey")
  user       user      @relation(fields: [user_Id], references: [id], onDelete: Cascade, map: "Comment_user_Id_fkey")
  product    product[]

  @@index([post_id], map: "Comment_post_id_fkey")
  @@index([user_Id], map: "Comment_user_Id_fkey")
}

model post {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  create_at   DateTime  @default(now())
  authorId    Int
  comment     comment[]
  user        user      @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Post_authorId_fkey")

  @@index([authorId], map: "Post_authorId_fkey")
}

model product {
  id                  Int       @id @default(autoincrement())
  product_name        String
  product_description String
  quantity            Int
  product_condition   String
  price               Int
  featured            Boolean?
  product_img         Json?
  product_category    String?
  in_stock            Int?
  rating              Int?
  discount            Int?
  color               String?
  sold                Int?
  brand               String?
  category            category? @relation(fields: [product_category], references: [id], onDelete: Cascade,onUpdate: Cascade)
  user_id             Int
  user                user      @relation(fields: [user_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  comment_id          String?
  comment             comment?  @relation(fields: [comment_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  banner_id           String?
  banner              banner?   @relation(fields: [banner_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  cart                cart[]
  order               orderProducts[]
}

model category {
  id            String    @unique @default(uuid())
  category_name String
  description   String?
  quantity      Int?
  product       product[]
}

model user {
  id            Int       @id @default(autoincrement())
  email         String    @unique(map: "User_email_key")
  password      String
  firstName     String
  lastName      String
  user_type     String?
  address       String?
  city          String?
  phone_number  String?
  delivery_type String?
  privacyPolicy Boolean?
  createdAt     DateTime  @default(now())
  comment_count Int       @default(0)
  comment       comment[]
  post          post[]
  products      product[]
  cart          cart[]
}
model cart {
  id String @id @default(uuid())
  user_id     Int?
  quantity    Int?
  guestId     String?
  user        user?      @relation(fields: [user_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  product_id Int
  product     product @relation(fields:[product_id],references: [id],onDelete: Cascade,onUpdate: Cascade)
}



model order {
  id           String        @id @default(uuid())
  products        orderProducts[]
  user_id      Int
  email        String?
  first_name   String?
  last_name    String?
  address      String?
  apartment    String?
  city         String?
  postal_code  String?
  phone_number String?
  quantity     String?
  created_at   DateTime      @default(now()) // Timestamp when order is created
  updated_at   DateTime      @updatedAt      // Auto-updates on change
}

model orderProducts{
  id Int     @id @default(autoincrement())
  orderId String
  productId Int
  quantity Int?
  product product @relation(fields: [productId],references: [id]) 
  order order @relation(fields:[orderId],references: [id])
  @@unique([orderId, productId])
}
model banner {
  id          String    @id @default(uuid())
  product     product[]
  title       String?
  description String?
  show        Boolean?  @default(false)
}


